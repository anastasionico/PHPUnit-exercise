WRITE A TEST (WALKTHROUGH)

Initiate the project
	Create a folder
	Initiate it in git
	Create src/ and tests/ directories
	Touch composer.json

Initiate composer
	Define the autoload inside composer.json 
	Run composer install in the CLI
	Create a class inside the src directory (give a namespace to the class)
	Run composer dump-autoloar in the CLI

Install and initiate phpunit
	Run composer require phpunit/phpunit
	Create the phpunit.xml file and indicate the directory where the test will be written
	Create the tests/bootstrap.php file and require autoload and Function.php


Write a test
	Write a test file inside the tests folder (or whatever indicated inside phpunit.xml) give it the same name of the class to test nameclassTest.php (WARNING pay attention if the address of the class to extend is correct)

Add mockery
	add mockery/mockery to the composer.json and update composer
	create a new test and mock a class
	withing the test class create a method that add and expectations on a method within the class
	(the expectation check if and how many times a selected method has been called within a test method)
	Mockery need to be told to check that the method was called as expected and to trigger this count we need to close the mockery by using the the method tearDown

Add Mockery on the StripeBilling class
	If a class has an depencency of another class or a model what we need to do in order to be able to mock it is to insert the depencency into the construct, this allows Mochery to allow the required class in the test and pass it as parameter of the class we are testing

Fixing the antipattern
	Becouse the controlle does not have to care who is responsible to provide the billing functionality, eventually I have created a BillingInterface.
	Having injected the interface instead of the billing class allows to make easier in case i need to change from stripe to others.
			__________________________________________					__________________________________________	


